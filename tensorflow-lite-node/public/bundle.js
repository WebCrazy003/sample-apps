/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/main.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/idb-keyval/dist/idb-keyval.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/idb-keyval/dist/idb-keyval.mjs ***!
  \*****************************************************/
/*! exports provided: Store, get, set, del, clear, keys */
/***/ (function(__webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Store\", function() { return Store; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"get\", function() { return get; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"set\", function() { return set; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"del\", function() { return del; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"clear\", function() { return clear; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"keys\", function() { return keys; });\nclass Store {\r\n    constructor(dbName = 'keyval-store', storeName = 'keyval') {\r\n        this.storeName = storeName;\r\n        this._dbp = new Promise((resolve, reject) => {\r\n            const openreq = indexedDB.open(dbName, 1);\r\n            openreq.onerror = () => reject(openreq.error);\r\n            openreq.onsuccess = () => resolve(openreq.result);\r\n            // First time setup: create an empty object store\r\n            openreq.onupgradeneeded = () => {\r\n                openreq.result.createObjectStore(storeName);\r\n            };\r\n        });\r\n    }\r\n    _withIDBStore(type, callback) {\r\n        return this._dbp.then(db => new Promise((resolve, reject) => {\r\n            const transaction = db.transaction(this.storeName, type);\r\n            transaction.oncomplete = () => resolve();\r\n            transaction.onabort = transaction.onerror = () => reject(transaction.error);\r\n            callback(transaction.objectStore(this.storeName));\r\n        }));\r\n    }\r\n}\r\nlet store;\r\nfunction getDefaultStore() {\r\n    if (!store)\r\n        store = new Store();\r\n    return store;\r\n}\r\nfunction get(key, store = getDefaultStore()) {\r\n    let req;\r\n    return store._withIDBStore('readonly', store => {\r\n        req = store.get(key);\r\n    }).then(() => req.result);\r\n}\r\nfunction set(key, value, store = getDefaultStore()) {\r\n    return store._withIDBStore('readwrite', store => {\r\n        store.put(value, key);\r\n    });\r\n}\r\nfunction del(key, store = getDefaultStore()) {\r\n    return store._withIDBStore('readwrite', store => {\r\n        store.delete(key);\r\n    });\r\n}\r\nfunction clear(store = getDefaultStore()) {\r\n    return store._withIDBStore('readwrite', store => {\r\n        store.clear();\r\n    });\r\n}\r\nfunction keys(store = getDefaultStore()) {\r\n    const keys = [];\r\n    return store._withIDBStore('readonly', store => {\r\n        // This would be store.getAllKeys(), but it isn't supported by Edge or Safari.\r\n        // And openKeyCursor isn't supported by Safari.\r\n        (store.openKeyCursor || store.openCursor).call(store).onsuccess = function () {\r\n            if (!this.result)\r\n                return;\r\n            keys.push(this.result.key);\r\n            this.result.continue();\r\n        };\r\n    }).then(() => keys);\r\n}\n\n\n\n\n//# sourceURL=webpack:///./node_modules/idb-keyval/dist/idb-keyval.mjs?");

/***/ }),

/***/ "./node_modules/kaia.js/dist/kaia.mjs":
/*!********************************************!*\
  !*** ./node_modules/kaia.js/dist/kaia.mjs ***!
  \********************************************/
/*! exports provided: TensorFlowMobile, createTensorFlowMobile, TensorFlowLite, createTensorFlowLite, PocketSphinx, createPocketSphinx, AndroidSpeechRecognizer, createAndroidSpeechRecognizer, AndroidMultiDetector, createAndroidMultiDetector, Serial, createSerial, TextToSpeech, createTextToSpeech, Sensors, createSensors, DeviceSettings, createDeviceSettings */
/***/ (function(__webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TensorFlowMobile\", function() { return TensorFlowMobile; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createTensorFlowMobile\", function() { return createTensorFlowMobile; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TensorFlowLite\", function() { return TensorFlowLite; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createTensorFlowLite\", function() { return createTensorFlowLite; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PocketSphinx\", function() { return PocketSphinx; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createPocketSphinx\", function() { return createPocketSphinx; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AndroidSpeechRecognizer\", function() { return AndroidSpeechRecognizer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createAndroidSpeechRecognizer\", function() { return createAndroidSpeechRecognizer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AndroidMultiDetector\", function() { return AndroidMultiDetector; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createAndroidMultiDetector\", function() { return createAndroidMultiDetector; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Serial\", function() { return Serial; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createSerial\", function() { return createSerial; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TextToSpeech\", function() { return TextToSpeech; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createTextToSpeech\", function() { return createTextToSpeech; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Sensors\", function() { return Sensors; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createSensors\", function() { return createSensors; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DeviceSettings\", function() { return DeviceSettings; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createDeviceSettings\", function() { return createDeviceSettings; });\n/**\r\n * @license\r\n * Copyright 2018 OOMWOO LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nclass TensorFlowMobile {\r\n    constructor() {\r\n        this._handle = -1;\r\n        this._closed = false;\r\n        this._resolveFunc = null;\r\n        this._rejectFunc = null;\r\n        this._modelLoaded = false;\r\n        this._listener = null;\r\n        if (window._kaia === undefined)\r\n            throw 'TensorFlowLite requires Android Kaia.ai app to run';\r\n        if (window._kaia.tensorFlowMobile === undefined) {\r\n            window._kaia.tensorFlowMobile = function () { };\r\n            window._kaia.tensorFlowMobile.engine = [];\r\n            window._kaia.tensorFlowMobile.cb = function (jsonString) {\r\n                const opRes = JSON.parse(unescape(jsonString));\r\n                const obj = window._kaia.tensorFlowMobile.engine[opRes.handle];\r\n                if (opRes.err)\r\n                    obj._reject(opRes.err);\r\n                else\r\n                    obj._resolve(opRes.event === 'init' ? obj : opRes);\r\n                if (obj._listener != null)\r\n                    obj._listener(opRes.err, opRes);\r\n            };\r\n        }\r\n    }\r\n    async init(model, params) {\r\n        if (this._handle !== -1)\r\n            return Promise.reject('Already initialized');\r\n        if (params && typeof params.eventListener === 'function')\r\n            this.setEventListener(params.eventListener);\r\n        window._kaia.tensorFlowMobile.engine.push(this);\r\n        this._handle = window._kaia.tensorFlowMobile.engine.length - 1;\r\n        if (this._modelLoaded)\r\n            return Promise.reject('Model already loaded');\r\n        this._modelLoaded = true;\r\n        // Must use Chrome\r\n        const modelDecoded = new TextDecoder(\"iso-8859-1\").decode(model);\r\n        params = params || {};\r\n        params.handle = this._handle;\r\n        let res = JSON.parse(window._kaia.tensorFlowMobileInit(JSON.stringify(params), modelDecoded));\r\n        return this._makePromise(res);\r\n    }\r\n    _clearCallback() {\r\n        this._resolveFunc = null;\r\n        this._rejectFunc = null;\r\n    }\r\n    _resolve(res) {\r\n        let cb = this._resolveFunc;\r\n        this._clearCallback();\r\n        if (cb !== null)\r\n            cb(res);\r\n    }\r\n    _reject(err) {\r\n        let cb = this._rejectFunc;\r\n        this._clearCallback();\r\n        if (cb !== null)\r\n            cb(err);\r\n    }\r\n    async run(data, params) {\r\n        if (this.closed())\r\n            return Promise.reject('TensorFlowMobile instance has been closed');\r\n        const textDecoder = new TextDecoder('iso-8859-1');\r\n        let dataDecoded = [];\r\n        for (let i = 0; i < data.length; i++)\r\n            dataDecoded[i] = textDecoder.decode(data[i]);\r\n        params = params || {};\r\n        params.handle = this._handle;\r\n        let res = JSON.parse(window._kaia.tensorFlowMobileRun(JSON.stringify(params), dataDecoded));\r\n        return this._makePromise(res);\r\n    }\r\n    _makePromise(res) {\r\n        if (res.err)\r\n            return Promise.reject(res.err);\r\n        let promise = new Promise((resolve, reject) => {\r\n            this._resolveFunc = resolve;\r\n            this._rejectFunc = reject;\r\n        });\r\n        return promise;\r\n    }\r\n    closed() {\r\n        // return window._kaia.tensorFlowMobile.engine[this._handle] === null;\r\n        return this._closed;\r\n    }\r\n    setEventListener(listener) {\r\n        this._listener = listener;\r\n    }\r\n    close() {\r\n        this._closed = true;\r\n        let params = { handle: this._handle };\r\n        let res = JSON.parse(window._kaia.tensorFlowMobileClose(JSON.stringify(params)));\r\n        this._clearCallback();\r\n        this._listener = null;\r\n        // window._kaia.tensorFlowMobile.engine[this._handle] = null;\r\n        if (res.err)\r\n            throw res.err;\r\n    }\r\n}\r\nasync function createTensorFlowMobile(model, params) {\r\n    const tfMobile = new TensorFlowMobile();\r\n    return tfMobile.init(model, params);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2018 OOMWOO LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nclass TensorFlowLite {\r\n    constructor() {\r\n        this._handle = -1;\r\n        this._closed = false;\r\n        this._resolveFunc = null;\r\n        this._rejectFunc = null;\r\n        this._modelLoaded = false;\r\n        this._listener = null;\r\n        if (window._kaia === undefined)\r\n            throw 'TensorFlowLite requires Android Kaia.ai app to run';\r\n        if (window._kaia.tensorFlowLite === undefined) {\r\n            window._kaia.tensorFlowLite = function () { };\r\n            window._kaia.tensorFlowLite.engine = [];\r\n            window._kaia.tensorFlowLite.cb = function (jsonString) {\r\n                const opRes = JSON.parse(unescape(jsonString));\r\n                let obj = window._kaia.tensorFlowLite.engine[opRes.handle];\r\n                if (opRes.err)\r\n                    obj._reject(opRes.err);\r\n                else\r\n                    obj._resolve(opRes.event === 'init' ? obj : opRes);\r\n                if (obj._listener != null)\r\n                    obj._listener(opRes.err, opRes);\r\n            };\r\n        }\r\n    }\r\n    async init(model, params) {\r\n        if (this._handle !== -1)\r\n            return Promise.reject('Already initialized');\r\n        if (params && typeof params.eventListener === 'function')\r\n            this.setEventListener(params.eventListener);\r\n        window._kaia.tensorFlowLite.engine.push(this);\r\n        this._handle = window._kaia.tensorFlowLite.engine.length - 1;\r\n        if (this._modelLoaded)\r\n            return Promise.reject('Model already loaded');\r\n        this._modelLoaded = true;\r\n        // Must use Chrome\r\n        const modelDecoded = new TextDecoder('iso-8859-1').decode(model);\r\n        params = params || {};\r\n        params.handle = this._handle;\r\n        let res = JSON.parse(window._kaia.tensorFlowLiteInit(JSON.stringify(params), modelDecoded));\r\n        return this._makePromise(res);\r\n    }\r\n    _clearCallback() {\r\n        this._resolveFunc = null;\r\n        this._rejectFunc = null;\r\n    }\r\n    _resolve(res) {\r\n        let cb = this._resolveFunc;\r\n        this._clearCallback();\r\n        if (cb !== null)\r\n            cb(res);\r\n    }\r\n    _reject(err) {\r\n        let cb = this._rejectFunc;\r\n        this._clearCallback();\r\n        if (cb !== null)\r\n            cb(err);\r\n    }\r\n    async run(data, params) {\r\n        if (this.closed())\r\n            return Promise.reject('TensorFlowLite instance has been closed');\r\n        const textDecoder = new TextDecoder('iso-8859-1');\r\n        let dataDecoded = [];\r\n        for (let i = 0; i < data.length; i++)\r\n            dataDecoded[i] = textDecoder.decode(data[i]);\r\n        params = params || {};\r\n        params.handle = this._handle;\r\n        let res = JSON.parse(window._kaia.tensorFlowLiteRun(JSON.stringify(params), dataDecoded));\r\n        return this._makePromise(res);\r\n    }\r\n    _makePromise(res) {\r\n        if (res.err)\r\n            return Promise.reject(res.err);\r\n        let promise = new Promise((resolve, reject) => {\r\n            this._resolveFunc = resolve;\r\n            this._rejectFunc = reject;\r\n        });\r\n        return promise;\r\n    }\r\n    closed() {\r\n        return this._closed;\r\n        //return window._kaia.tensorFlowLite.engine[this._handle] === null;\r\n    }\r\n    setEventListener(listener) {\r\n        this._listener = listener;\r\n    }\r\n    close() {\r\n        this._closed = true;\r\n        let params = { handle: this._handle };\r\n        let res = JSON.parse(window._kaia.tensorFlowLiteClose(JSON.stringify(params)));\r\n        this._listener = null;\r\n        this._clearCallback();\r\n        //window._kaia.tensorFlowLite.engine[this._handle] = null;\r\n        if (res.err)\r\n            throw res.err;\r\n    }\r\n}\r\nasync function createTensorFlowLite(model, params) {\r\n    const tfLite = new TensorFlowLite();\r\n    return tfLite.init(model, params);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2018 OOMWOO LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nclass PocketSphinx {\r\n    constructor() {\r\n        this._resolveFunc = null;\r\n        this._rejectFunc = null;\r\n        this._listener = null;\r\n        this._closed = false;\r\n        if (window._kaia === undefined)\r\n            throw 'PocketSphinx requires Android Kaia.ai app to run';\r\n        if (PocketSphinx.singleton())\r\n            throw 'Only one instance allowed';\r\n        window._kaia.pocketSphinx = function () { };\r\n        window._kaia.pocketSphinx.engine = this;\r\n        window._kaia.pocketSphinx.cb = function (jsonString) {\r\n            const opRes = JSON.parse(unescape(jsonString));\r\n            const obj = window._kaia.pocketSphinx.engine;\r\n            if (opRes.event === 'init')\r\n                if (opRes.err)\r\n                    obj._reject(opRes.err);\r\n                else\r\n                    obj._resolve(opRes);\r\n            if (obj._listener != null)\r\n                obj._listener(opRes.err, opRes);\r\n        };\r\n    }\r\n    static singleton() {\r\n        return (window._kaia && window._kaia.pocketSphinx) ?\r\n            window._kaia.pocketSphinx.engine : undefined;\r\n    }\r\n    _extractArrayBufs(params) {\r\n        const data = [];\r\n        const fileNames = [];\r\n        const textDecoder = new TextDecoder(\"iso-8859-1\");\r\n        if (params.searchFile) {\r\n            if (!Array.isArray(params.searchFile))\r\n                throw 'searchFile must be an array';\r\n            params.searchFile.forEach((item) => {\r\n                fileNames.push(item.fileName);\r\n                // Must use Chrome\r\n                data.push(textDecoder.decode(item.file || ''));\r\n            });\r\n        }\r\n        params.searchFile = fileNames;\r\n        // TODO check it's ArrayBuffer\r\n        if (params.modelZip) {\r\n            data.push(textDecoder.decode(params.modelZip));\r\n            delete params.modelZip;\r\n        }\r\n        return data;\r\n    }\r\n    async init(params) {\r\n        if (PocketSphinx.initialized)\r\n            return Promise.reject('Already initialized');\r\n        params = params || {};\r\n        if (typeof params.eventListener === 'function')\r\n            this.setEventListener(params.eventListener);\r\n        PocketSphinx.initialized = true;\r\n        const data = this._extractArrayBufs(params);\r\n        let res = JSON.parse(window._kaia.pocketSphinxInit(JSON.stringify(params), data));\r\n        return this._makePromise(res);\r\n    }\r\n    async addSearch(params) {\r\n        params = params || {};\r\n        const data = this._extractArrayBufs(params);\r\n        let res = JSON.parse(window._kaia.pocketSphinxAddSearch(JSON.stringify(params), data));\r\n        return this._makePromise(res);\r\n    }\r\n    _clearCallback() {\r\n        this._resolveFunc = null;\r\n        this._rejectFunc = null;\r\n    }\r\n    _resolve(res) {\r\n        let cb = this._resolveFunc;\r\n        this._clearCallback();\r\n        if (cb !== null)\r\n            cb(res);\r\n    }\r\n    _reject(err) {\r\n        let cb = this._rejectFunc;\r\n        this._clearCallback();\r\n        if (cb !== null)\r\n            cb(err);\r\n    }\r\n    async listen(params) {\r\n        if (this.closed())\r\n            return Promise.reject('PocketSphinx instance has been closed');\r\n        if (params == undefined)\r\n            params = { cmd: 'listen' };\r\n        else if (typeof params == 'boolean')\r\n            params = params ? { cmd: 'listen' } : { cmd: 'cancel' };\r\n        else if (typeof params == 'string')\r\n            params = { cmd: 'listen', searchName: params };\r\n        let res = JSON.parse(window._kaia.pocketSphinxListen(JSON.stringify(params)));\r\n        return this._makePromise(res);\r\n    }\r\n    _makePromise(res) {\r\n        if (res.err)\r\n            return Promise.reject(res.err);\r\n        let promise = new Promise((resolve, reject) => {\r\n            this._resolveFunc = resolve;\r\n            this._rejectFunc = reject;\r\n        });\r\n        return promise;\r\n    }\r\n    closed() {\r\n        return this._closed;\r\n    }\r\n    close() {\r\n        this._closed = true;\r\n        let res = JSON.parse(window._kaia.pocketSphinxClose());\r\n        if (res.err)\r\n            throw res.err;\r\n        this._clearCallback();\r\n        this._listener = null;\r\n    }\r\n    setEventListener(listener) {\r\n        this._listener = listener;\r\n    }\r\n}\r\nPocketSphinx.initialized = false;\r\nasync function createPocketSphinx(params) {\r\n    const pocketSphinx = PocketSphinx.singleton() || new PocketSphinx();\r\n    return PocketSphinx.initialized ? Promise.resolve(pocketSphinx) :\r\n        pocketSphinx.init(params);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2018 OOMWOO LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nclass AndroidSpeechRecognizer {\r\n    constructor() {\r\n        this._closed = false;\r\n        this._resolveFunc = null;\r\n        this._rejectFunc = null;\r\n        this._listener = null;\r\n        if (window._kaia === undefined)\r\n            throw 'AndroidSpeechRecognizer requires Android Kaia.ai app to run';\r\n        if (AndroidSpeechRecognizer.singleton())\r\n            throw 'Only one instance allowed';\r\n        window._kaia.androidSpeechRecognizer = function () { };\r\n        window._kaia.androidSpeechRecognizer.engine = this;\r\n        window._kaia.androidSpeechRecognizer.cb = function (jsonString) {\r\n            const opRes = JSON.parse(unescape(jsonString));\r\n            const obj = window._kaia.androidSpeechRecognizer.engine;\r\n            if (opRes.event === 'init')\r\n                if (opRes.err)\r\n                    obj._reject(opRes.err);\r\n                else\r\n                    obj._resolve(obj);\r\n            if (obj._listener != null)\r\n                obj._listener(opRes.err, opRes);\r\n        };\r\n    }\r\n    static singleton() {\r\n        return (window._kaia && window._kaia.androidSpeechRecognizer) ?\r\n            window._kaia.androidSpeechRecognizer.engine : undefined;\r\n    }\r\n    async init(params) {\r\n        if (AndroidSpeechRecognizer.initialized)\r\n            return Promise.reject('Already initialized');\r\n        AndroidSpeechRecognizer.initialized = true;\r\n        params = params || {};\r\n        if (typeof params.eventListener === 'function')\r\n            this.setEventListener(params.eventListener);\r\n        let res = JSON.parse(window._kaia.androidSpeechRecognizerInit(JSON.stringify(params)));\r\n        return this._makePromise(res);\r\n    }\r\n    _clearCallback() {\r\n        this._resolveFunc = null;\r\n        this._rejectFunc = null;\r\n    }\r\n    _resolve(res) {\r\n        let cb = this._resolveFunc;\r\n        this._clearCallback();\r\n        if (cb !== null)\r\n            cb(res);\r\n    }\r\n    _reject(err) {\r\n        let cb = this._rejectFunc;\r\n        this._clearCallback();\r\n        if (cb !== null)\r\n            cb(err);\r\n    }\r\n    async listen(params) {\r\n        if (this.closed())\r\n            return Promise.reject('AndroidSpeechRecognizer instance has been closed');\r\n        if (params == undefined)\r\n            params = { enabled: true };\r\n        else if (typeof params == 'boolean')\r\n            params = { enabled: params };\r\n        let res = JSON.parse(window._kaia.androidSpeechRecognizerListen(JSON.stringify(params)));\r\n        return this._makePromise(res);\r\n    }\r\n    _makePromise(res) {\r\n        if (res.err)\r\n            return Promise.reject(res.err);\r\n        let promise = new Promise((resolve, reject) => {\r\n            this._resolveFunc = resolve;\r\n            this._rejectFunc = reject;\r\n        });\r\n        return promise;\r\n    }\r\n    closed() {\r\n        return this._closed;\r\n    }\r\n    close() {\r\n        this._closed = true;\r\n        let res = JSON.parse(window._kaia.androidSpeechRecognizerClose());\r\n        if (res.err)\r\n            throw res.err;\r\n        this._clearCallback();\r\n        this._listener = null;\r\n    }\r\n    setEventListener(listener) {\r\n        this._listener = listener;\r\n    }\r\n}\r\nAndroidSpeechRecognizer.initialized = false;\r\nasync function createAndroidSpeechRecognizer(params) {\r\n    const androidSpeechRecognizer = AndroidSpeechRecognizer.singleton() ||\r\n        new AndroidSpeechRecognizer();\r\n    return AndroidSpeechRecognizer.initialized ?\r\n        Promise.resolve(androidSpeechRecognizer) : androidSpeechRecognizer.init(params);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2018 OOMWOO LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nclass AndroidMultiDetector {\r\n    constructor() {\r\n        this._resolveFunc = null;\r\n        this._rejectFunc = null;\r\n        this._closed = false;\r\n        this._listener = null;\r\n        if (window._kaia === undefined)\r\n            throw 'AndroidMultiDetector requires Android Kaia.ai app to run';\r\n        if (AndroidMultiDetector.singleton())\r\n            throw 'Only one instance allowed';\r\n        window._kaia.androidMultiDetector = function () { };\r\n        window._kaia.androidMultiDetector.engine = this;\r\n        window._kaia.androidMultiDetector.cb = function (jsonString) {\r\n            const opRes = JSON.parse(unescape(jsonString));\r\n            const obj = window._kaia.androidMultiDetector.engine;\r\n            if (opRes.event === 'init')\r\n                if (opRes.err)\r\n                    obj._reject(opRes.err);\r\n                else\r\n                    obj._resolve(obj);\r\n            if (obj._listener != null)\r\n                obj._listener(opRes.err, opRes);\r\n        };\r\n    }\r\n    static singleton() {\r\n        return (window._kaia && window._kaia.androidMultiDetector) ?\r\n            window._kaia.androidMultiDetector.engine : undefined;\r\n    }\r\n    async init(params) {\r\n        if (AndroidMultiDetector.initialized)\r\n            return Promise.reject('Already initialized');\r\n        // TODO mark initialized if res success\r\n        AndroidMultiDetector.initialized = true;\r\n        params = params || {};\r\n        if (typeof params.eventListener === 'function')\r\n            this.setEventListener(params.eventListener);\r\n        let res = JSON.parse(window._kaia.androidMultiDetectorInit(JSON.stringify(params)));\r\n        return this._makePromise(res);\r\n    }\r\n    _clearCallback() {\r\n        this._resolveFunc = null;\r\n        this._rejectFunc = null;\r\n    }\r\n    _resolve(res) {\r\n        let cb = this._resolveFunc;\r\n        this._clearCallback();\r\n        if (cb !== null)\r\n            cb(res);\r\n    }\r\n    _reject(err) {\r\n        let cb = this._rejectFunc;\r\n        this._clearCallback();\r\n        if (cb !== null)\r\n            cb(err);\r\n    }\r\n    async detect(params) {\r\n        if (this.closed())\r\n            return Promise.reject('AndroidMultiDetector instance has been closed');\r\n        if (params === undefined)\r\n            params = { enabled: true };\r\n        else if (typeof params === 'boolean')\r\n            params = { enabled: params };\r\n        else if (params instanceof ArrayBuffer) {\r\n            const textDecoder = new TextDecoder('iso-8859-1');\r\n            params = textDecoder.decode(params);\r\n        }\r\n        else if (typeof params === 'string') { }\r\n        else\r\n            return Promise.reject('Unsupported argument type');\r\n        let res = JSON.parse(window._kaia.androidMultiDetectorDetect(params));\r\n        return this._makePromise(res);\r\n    }\r\n    _makePromise(res) {\r\n        if (res.err)\r\n            return Promise.reject(res.err);\r\n        let promise = new Promise((resolve, reject) => {\r\n            this._resolveFunc = resolve;\r\n            this._rejectFunc = reject;\r\n        });\r\n        return promise;\r\n    }\r\n    closed() {\r\n        return this._closed;\r\n    }\r\n    close() {\r\n        this._closed = true;\r\n        let res = JSON.parse(window._kaia.androidMultiDetectorClose(''));\r\n        if (res.err)\r\n            throw res.err;\r\n        this._clearCallback();\r\n        this._listener = null;\r\n    }\r\n    setEventListener(listener) {\r\n        this._listener = listener;\r\n    }\r\n}\r\nAndroidMultiDetector.initialized = false;\r\nasync function createAndroidMultiDetector(params) {\r\n    const androidMultiDetector = AndroidMultiDetector.singleton() ||\r\n        new AndroidMultiDetector();\r\n    return AndroidMultiDetector.initialized ? Promise.resolve(androidMultiDetector) :\r\n        androidMultiDetector.init(params);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2018 OOMWOO LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nclass Serial {\r\n    constructor() {\r\n        this._closed = false;\r\n        this._resolveFunc = null;\r\n        this._rejectFunc = null;\r\n        this._listener = null;\r\n        if (window._kaia === undefined)\r\n            throw 'Serial requires Android Kaia.ai app to run';\r\n        if (Serial.singleton())\r\n            throw 'Only one instance allowed';\r\n        window._kaia.serial = function () { };\r\n        window._kaia.serial.engine = this;\r\n        window._kaia.serial.cb = function (jsonString) {\r\n            const opRes = JSON.parse(jsonString);\r\n            const obj = window._kaia.serial.engine;\r\n            if (opRes.event === 'serialUsbReady')\r\n                obj._resolve(obj);\r\n            if ((opRes.event === 'usbNotSupported' || opRes.event === 'usbDeviceNotWorking' ||\r\n                opRes.event === 'cdcDriverNotWorking'))\r\n                obj._reject(opRes.event);\r\n            if (obj._listener != null)\r\n                obj._listener(opRes.err, opRes);\r\n        };\r\n    }\r\n    static singleton() {\r\n        return (window._kaia && window._kaia.serial) ?\r\n            window._kaia.serial.engine : undefined;\r\n    }\r\n    async init(params) {\r\n        if (Serial.initialized)\r\n            return Promise.reject('Already initialized');\r\n        params = params || {};\r\n        if (typeof params.eventListener === 'function')\r\n            this.setEventListener(params.eventListener);\r\n        Serial.initialized = true;\r\n        let res = JSON.parse(window._kaia.serialInit(JSON.stringify(params)));\r\n        return this._makePromise(res);\r\n    }\r\n    _clearCallback() {\r\n        this._resolveFunc = null;\r\n        this._rejectFunc = null;\r\n    }\r\n    _resolve(res) {\r\n        let cb = this._resolveFunc;\r\n        this._clearCallback();\r\n        if (cb !== null)\r\n            cb(res);\r\n    }\r\n    _reject(err) {\r\n        let cb = this._rejectFunc;\r\n        this._clearCallback();\r\n        if (cb !== null)\r\n            cb(err);\r\n    }\r\n    write(params) {\r\n        if (this.closed())\r\n            throw 'Serial instance has been closed';\r\n        if (typeof params === 'string')\r\n            params = { message: params };\r\n        return JSON.parse(window._kaia.serialWrite(JSON.stringify(params)));\r\n    }\r\n    _makePromise(res) {\r\n        if (res.err)\r\n            return Promise.reject(res.err);\r\n        let promise = new Promise((resolve, reject) => {\r\n            this._resolveFunc = resolve;\r\n            this._rejectFunc = reject;\r\n        });\r\n        return promise;\r\n    }\r\n    closed() {\r\n        return this._closed;\r\n    }\r\n    close() {\r\n        this._closed = true;\r\n        let res = JSON.parse(window._kaia.serialClose());\r\n        if (res.err)\r\n            throw res.err;\r\n        this._clearCallback();\r\n        this._listener = null;\r\n    }\r\n    setEventListener(listener) {\r\n        this._listener = listener;\r\n    }\r\n}\r\nSerial.initialized = false;\r\nasync function createSerial(params) {\r\n    const serial = Serial.singleton() || new Serial();\r\n    return Serial.initialized ? Promise.resolve(serial) : serial.init(params);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2018 OOMWOO LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nclass TextToSpeech {\r\n    constructor() {\r\n        this._resolveFunc = null;\r\n        this._rejectFunc = null;\r\n        this._closed = false;\r\n        this._listener = null;\r\n        if (window._kaia === undefined)\r\n            throw 'TextToSpeech requires Android Kaia.ai app to run';\r\n        if (TextToSpeech.singleton())\r\n            throw 'Only one instance allowed';\r\n        window._kaia.textToSpeech = function () { };\r\n        window._kaia.textToSpeech.engine = this;\r\n        window._kaia.textToSpeech.cb = function (jsonString) {\r\n            const opRes = JSON.parse(jsonString);\r\n            const obj = window._kaia.textToSpeech.engine;\r\n            if (opRes.event === 'init' || opRes.event === 'done' || opRes.event === 'error') {\r\n                if (opRes.err)\r\n                    obj._reject(opRes.err);\r\n                else if (!opRes.err)\r\n                    obj._resolve(opRes.event === 'init' ? obj : opRes.event);\r\n            }\r\n            if (obj._listener != null)\r\n                obj._listener(opRes.err, opRes);\r\n        };\r\n    }\r\n    static singleton() {\r\n        return (window._kaia && window._kaia.textToSpeech) ?\r\n            window._kaia.textToSpeech.engine : undefined;\r\n    }\r\n    async init(params) {\r\n        if (TextToSpeech.initialized)\r\n            return Promise.reject('Already initialized');\r\n        params = params || {};\r\n        if (typeof params.eventListener === 'function')\r\n            this.setEventListener(params.eventListener);\r\n        TextToSpeech.initialized = true;\r\n        let res = JSON.parse(window._kaia.textToSpeechInit(JSON.stringify(params)));\r\n        if (params) {\r\n            await this._makePromise(res);\r\n            return this.configure(params);\r\n        }\r\n        else\r\n            return this._makePromise(res);\r\n    }\r\n    _clearCallback() {\r\n        this._resolveFunc = null;\r\n        this._rejectFunc = null;\r\n    }\r\n    _resolve(res) {\r\n        let cb = this._resolveFunc;\r\n        this._clearCallback();\r\n        if (cb !== null)\r\n            cb(res);\r\n    }\r\n    _reject(err) {\r\n        let cb = this._rejectFunc;\r\n        this._clearCallback();\r\n        if (cb !== null)\r\n            cb(err);\r\n    }\r\n    async speak(params) {\r\n        if (this.closed())\r\n            throw 'TextToSpeech instance has been closed';\r\n        if (typeof params === 'string')\r\n            params = { text: params };\r\n        let res = JSON.parse(window._kaia.textToSpeechSpeak(JSON.stringify(params)));\r\n        return this._makePromise(res);\r\n    }\r\n    async configure(params) {\r\n        if (!params)\r\n            return Promise.resolve(this);\r\n        if (this.closed())\r\n            return Promise.reject('TextToSpeech instance has been closed');\r\n        const res = JSON.parse(window._kaia.textToSpeechConfigure(JSON.stringify(params)));\r\n        return res.err ? Promise.reject(res.err) : Promise.resolve(this);\r\n    }\r\n    getConfig() {\r\n        if (this.closed())\r\n            throw 'TextToSpeech instance has been closed';\r\n        return JSON.parse(window._kaia.textToSpeechGetConfig(''));\r\n    }\r\n    _makePromise(res) {\r\n        if (res.err)\r\n            return Promise.reject(res.err);\r\n        let promise = new Promise((resolve, reject) => {\r\n            this._resolveFunc = resolve;\r\n            this._rejectFunc = reject;\r\n        });\r\n        return promise;\r\n    }\r\n    closed() {\r\n        return this._closed;\r\n    }\r\n    close() {\r\n        this._closed = true;\r\n        let res = JSON.parse(window._kaia.textToSpeechClose());\r\n        if (res.err)\r\n            throw res.err;\r\n        this._clearCallback();\r\n        this._listener = null;\r\n    }\r\n    setEventListener(listener) {\r\n        this._listener = listener;\r\n    }\r\n}\r\nTextToSpeech.initialized = false;\r\nasync function createTextToSpeech(params) {\r\n    const textToSpeech = TextToSpeech.singleton() || new TextToSpeech();\r\n    return TextToSpeech.initialized ? textToSpeech.configure(params) :\r\n        textToSpeech.init(params);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2018 OOMWOO LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nclass Sensors {\r\n    constructor() {\r\n        this._closed = false;\r\n        this._listener = null;\r\n        if (window._kaia === undefined)\r\n            throw 'Sensors require Android Kaia.ai app to run';\r\n        if (Sensors.singleton())\r\n            throw 'Only one instance allowed';\r\n        window._kaia.sensors = function () { };\r\n        window._kaia.sensors.engine = this;\r\n        window._kaia.sensors.cb = function (jsonString) {\r\n            const opRes = JSON.parse(jsonString);\r\n            const obj = window._kaia.sensors.engine;\r\n            if (obj._listener != null)\r\n                obj._listener(opRes.err, opRes);\r\n        };\r\n    }\r\n    static singleton() {\r\n        return (window._kaia && window._kaia.sensors) ?\r\n            window._kaia.sensors.engine : undefined;\r\n    }\r\n    async init(params) {\r\n        if (Sensors.initialized)\r\n            return Promise.reject('Already initialized');\r\n        params = params || {};\r\n        if (typeof params.eventListener === 'function')\r\n            this.setEventListener(params.eventListener);\r\n        Sensors.initialized = true;\r\n        const res = JSON.parse(window._kaia.sensorsInit(JSON.stringify(params)));\r\n        return res.err ? Promise.reject(res.err) : Promise.resolve(this);\r\n    }\r\n    list() {\r\n        if (this.closed())\r\n            throw 'Sensors instance has been closed';\r\n        return JSON.parse(window._kaia.sensorsList(''));\r\n    }\r\n    configure(params) {\r\n        if (this.closed())\r\n            throw 'Sensors instance has been closed';\r\n        if (!params)\r\n            throw 'Parameters object required';\r\n        return JSON.parse(window._kaia.sensorsConfigure(JSON.stringify(params)));\r\n    }\r\n    describe(params) {\r\n        if (this.closed())\r\n            throw 'Sensors instance has been closed';\r\n        if (!params)\r\n            throw 'Argument required';\r\n        if (Array.isArray(params))\r\n            params = { sensors: params };\r\n        return JSON.parse(window._kaia.sensorsDescribe(JSON.stringify(params)));\r\n    }\r\n    closed() {\r\n        return this._closed;\r\n    }\r\n    close() {\r\n        this._closed = true;\r\n        let res = JSON.parse(window._kaia.sensorsClose());\r\n        if (res.err)\r\n            throw res.err;\r\n        this._listener = null;\r\n    }\r\n    setEventListener(listener) {\r\n        this._listener = listener;\r\n    }\r\n}\r\nSensors.initialized = false;\r\nasync function createSensors(params) {\r\n    const sensors = Sensors.singleton() || new Sensors();\r\n    return Sensors.initialized ? Promise.resolve(sensors) : sensors.init(params);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2018 OOMWOO LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nclass DeviceSettings {\r\n    constructor() {\r\n        this._closed = false;\r\n        this._resolveFunc = null;\r\n        this._rejectFunc = null;\r\n        this._listener = null;\r\n        if (window._kaia === undefined)\r\n            throw 'DeviceSettings requires Android Kaia.ai app to run';\r\n        if (DeviceSettings.singleton())\r\n            throw 'Only one instance allowed';\r\n        window._kaia.deviceSettings = function () { };\r\n        window._kaia.deviceSettings.engine = this;\r\n        window._kaia.deviceSettings.cb = function (jsonString) {\r\n            const opRes = JSON.parse(jsonString);\r\n            const obj = window._kaia.deviceSettings.engine; // get this\r\n            if (opRes.event === 'configure' || opRes.event === 'getConfig') {\r\n                if (opRes.err)\r\n                    obj._reject(opRes.err);\r\n                else if (!opRes.err)\r\n                    obj._resolve(opRes.event === 'configure' ? obj : opRes);\r\n            }\r\n            if (obj._listener != null)\r\n                obj._listener(opRes.err, opRes);\r\n        };\r\n    }\r\n    static singleton() {\r\n        return (window._kaia && window._kaia.deviceSettings) ?\r\n            window._kaia.deviceSettings.engine : undefined;\r\n    }\r\n    async init(params) {\r\n        if (DeviceSettings.initialized)\r\n            return Promise.reject('Already initialized');\r\n        if (params && typeof params.eventListener === 'function')\r\n            this.setEventListener(params.eventListener);\r\n        DeviceSettings.initialized = true;\r\n        return (typeof params === 'object') ? this.configure(params) : Promise.resolve(this);\r\n    }\r\n    _clearCallback() {\r\n        this._resolveFunc = null;\r\n        this._rejectFunc = null;\r\n    }\r\n    _resolve(res) {\r\n        let cb = this._resolveFunc;\r\n        this._clearCallback();\r\n        if (cb !== null)\r\n            cb(res);\r\n    }\r\n    _reject(err) {\r\n        let cb = this._rejectFunc;\r\n        this._clearCallback();\r\n        if (cb !== null)\r\n            cb(err);\r\n    }\r\n    async configure(params) {\r\n        if (!params)\r\n            return Promise.resolve(this);\r\n        if (this.closed())\r\n            return Promise.reject('DeviceSettings instance has been closed');\r\n        params = params || {};\r\n        const res = JSON.parse(window._kaia.deviceSettingsConfigure(JSON.stringify(params)));\r\n        return this._makePromise(res);\r\n    }\r\n    async getConfig() {\r\n        if (this.closed())\r\n            return Promise.reject('DeviceSettings instance has been closed');\r\n        const res = JSON.parse(window._kaia.deviceSettingsGetConfig(''));\r\n        return this._makePromise(res);\r\n    }\r\n    _makePromise(res) {\r\n        if (res.err)\r\n            return Promise.reject(res.err);\r\n        let promise = new Promise((resolve, reject) => {\r\n            this._resolveFunc = resolve;\r\n            this._rejectFunc = reject;\r\n        });\r\n        return promise;\r\n    }\r\n    closed() {\r\n        return this._closed;\r\n    }\r\n    close() {\r\n        this._closed = true;\r\n        let res = JSON.parse(window._kaia.deviceSettingsClose());\r\n        if (res.err)\r\n            throw res.err;\r\n        this._clearCallback();\r\n        this._listener = null;\r\n    }\r\n    setEventListener(listener) {\r\n        this._listener = listener;\r\n    }\r\n}\r\nDeviceSettings.initialized = false;\r\nasync function createDeviceSettings(params) {\r\n    const deviceSettings = DeviceSettings.singleton() || new DeviceSettings();\r\n    return DeviceSettings.initialized ? deviceSettings.configure(params) :\r\n        deviceSettings.init(params);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2018 OOMWOO LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\n\n\n\n\n//# sourceURL=webpack:///./node_modules/kaia.js/dist/kaia.mjs?");

/***/ }),

/***/ "./src/main.js":
/*!*********************!*\
  !*** ./src/main.js ***!
  \*********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var idb_keyval__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! idb-keyval */ \"./node_modules/idb-keyval/dist/idb-keyval.mjs\");\n/* harmony import */ var kaia_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! kaia.js */ \"./node_modules/kaia.js/dist/kaia.mjs\");\n\n\n\nconst MODEL_FILE_NAME = 'graph.lite';\nconst LABEL_FILE_NAME = 'imagenet_1000_labels.txt';\nconst APP_PATH = './';\n\nlet canvas, labels, tfLite;\nsetup();\n\nasync function fetchAndCache(fileName, dataType) {\n\n  let data = await Object(idb_keyval__WEBPACK_IMPORTED_MODULE_0__[\"get\"])(fileName);\n\n  if (data !== undefined) {\n    console.log('Loaded data from cache, size=' + (data.size || data.length || data.byteLength));\n    return data;\n  }\n\n  console.log('Downloading ' + fileName);\n\n  let response = await fetch(APP_PATH + fileName);\n  switch (dataType) {\n    case 'arraybuffer':\n      data = await response.arrayBuffer();\n      break;\n    case 'blob':\n      data = await response.blob();\n      break;\n    case 'text':\n      data = await response.text();\n      break;\n    case 'json':\n      data = await response.json();\n      break;\n    default:\n      throw('Invalid data type');\n    }\n\n    await Object(idb_keyval__WEBPACK_IMPORTED_MODULE_0__[\"set\"])(fileName, data);\n    console.log('Stored data, data.size=' + (data.size || data.length));\n    return data;\n}\n\nasync function setup() {\n\n  try {\n    let statusDiv = document.getElementById('status');\n    statusDiv.innerHTML = 'Loading model ...';\n    let fpsDiv = document.getElementById('fps');\n\n    let model = await fetchAndCache(MODEL_FILE_NAME, 'arraybuffer');\n\n    let txt = await fetchAndCache(LABEL_FILE_NAME, 'text');\n    labels = JSON.parse(txt).labels;\n\n    statusDiv.innerText = 'Done loading model';\n    tfLite = await Object(kaia_js__WEBPACK_IMPORTED_MODULE_1__[\"createTensorFlowLite\"])(model);\n    statusDiv.innerText = 'TF Lite initialized';\n    \n    await setupWebcam();\n    statusDiv.innerText = 'Webcam initialized';\n    const closeButton = document.getElementById('close-button');\n    closeButton.addEventListener('click', () => {\n      tfLite.close();\n    });\n\n    const recogButton = document.getElementById('recognize-button');\n    recogButton.innerText = 'Recognize';\n    recogButton.addEventListener('click', async () => {\n      statusDiv.innerText = '';\n      let img = grabFrame();\n      const size = Math.min(canvas.width, canvas.height);\n      const t0 = performance.now();\n      let result = await tfLite.run([img],\n        {input: [\n          {width: size,\n           height: size,\n           channels: 4,\n           batchSize: 1,\n           imageMean: 128.0,\n           imageStd: 128.0,\n           type: 'colorBitmapAsFloat'\n          }],\n         output: [\n          {type: 'float',\n           size: [1, 1001]\n          }]\n        });\n      const runTimeMs = performance.now() - t0;\n      let probabilities = result.output[0][0];\n      let idxOfMax = indexOfMax(probabilities);\n      let max = probabilities[idxOfMax];\n      statusDiv.innerText = labels[idxOfMax] + ' ' + Number.parseFloat(max*100).toFixed(0) + '%';\n      fpsDiv.innerText = runTimeMs.toFixed(2) + 'ms, ' + (1000.0/runTimeMs).toFixed(2) + 'FPS';\n    });\n  } catch (e) {\n    console.log('setup() catch() ', e);\n  }  \n}\n\nasync function setupWebcam() {\n  const video = document.querySelector('video');\n  return new Promise((resolve, reject) => {\n    if (navigator.getUserMedia) {\n      navigator.getUserMedia(\n          {video: true},\n          stream => {\n            video.srcObject = stream;\n            video.addEventListener('loadeddata', async () => {\n              const width = video.videoWidth;\n              const height = video.videoHeight;\n              const aspectRatio = width / height;\n              if (width >= height) {\n                video.width = aspectRatio * video.height;\n              } else if (width < height) {\n                video.height = video.width / aspectRatio;\n              }\n              canvas = document.createElement('canvas');\n              canvas.width = video.width;\n              canvas.height = video.height;\n              resolve();\n            }, false);\n          },\n          error => {\n            reject();\n          });\n    } else {\n      reject();\n    }\n  });\n}\n\nfunction indexOfMax(a) {\n let idxOfMax = 0;\n for (let i = 1; i < a.length; i++)\n  if (a[i] > a[idxOfMax])\n    idxOfMax = i;\n return idxOfMax;\n}\n\nfunction grabFrame() {\n  const context = canvas.getContext('2d');\n  const video = document.querySelector('video');\n  const width = video.width;\n  const height = video.height;\n  const size = Math.min(width, height);\n\n  const centerHeight = height / 2;\n  const srcy = centerHeight - (size / 2);\n  const centerWidth = width / 2;\n  const srcx = centerWidth - (size / 2);\n\n  //ctx.drawImage(vid, 0, 0, canvas.width, canvas.height);\n  context.drawImage(video, srcx, srcy, width, height, 0, 0, size, size);\n  let imageData = context.getImageData(0, 0, size, size);\n  return imageData.data.buffer; // ArrayBuffer\n  //return canvas.toDataURL('image/jpeg', 0.3); // 1.0 for max quality\n}\n\n\n//# sourceURL=webpack:///./src/main.js?");

/***/ })

/******/ });